const { execSync } = require('child_process');
const { readFileSync, writeFileSync, existsSync, readdirSync, write } = require('fs');
const { join } = require('path');

let userId = '';

const projects = [{ project: 'ing-app-atomic', feed: 'P00130-ing-npm' }];
// , { project: 'central', feed: 'central-feed' }

function createDefault() {
    const defaultNpmrcTemplate = readFileSync(join(__dirname, 'assets/npmrc-default'));
    // check if default exists.
    if (!existsSync(`/Users/${userId}/.npmrcs/default`)) {
        // Execute npmrc to create default file.
        execSync('npx npmrc -c default', { stdio: 'inherit' });
        writeFileSync(`/Users/${userId}/.npmrcs/default`, defaultNpmrcTemplate);        
    }
}

function createNpmrcs() {
    // create default.
    createDefault();

    // load template
    const template = readFileSync(join(__dirname, '../assets/npmrc-template')).toString();
    projects.forEach((prj) => {
        if (!existsSync(`${NPMRC_S}/.npmrcs/${prj.project}`)) {
            // Create an npmrc with the name of the project
            execSync(`npx npmrc -c ${prj.project}`, { stdio: 'inherit' });
            // Now we update the template with the feed.
            const newNpmrc = template.replaceAll('$NPM_FEED', prj.feed);
            // Save the npmrc so that it can be used.
            writeFileSync(`/Users/${userId}/.npmrcs/${prj.project}`, newNpmrc);
        }
    })
}

function createPat(region, displayName) {
    // vso.packaging
    // vso.code_write
    const response = JSON.parse(execSync(`az rest --method post --uri "https://vssps.dev.azure.com/${region}/_apis/Tokens/Pats?api-version=7.01-preview.1" --resource "https://management.core.windows.net/" --body '{ "displayName": "${displayName}", scope: "vso.packaging" }' --headers Content-Type=application/json`).toString());
    if (response.patTokenError === 'none') {
        return response.patToken;
    }
    throw Error('could not generate token')
}



// function getPat(region, authId) {
//     const response = JSON.parse(execSync(`az rest --method get --uri "https://vssps.dev.azure.com/${region}/_apis/Tokens/Pats?authorizationId=${authId}&api-version=7.01-preview.1" --resource "https://management.core.windows.net/" --headers Content-Type=application/json`).toString());
// }


function revokePat(region, authId) {
    const response = execSync(`az rest --method delete --uri "https://vssps.dev.azure.com/${region}/_apis/Tokens/Pats?authorizationId=${authId}&api-version=7.01-preview.1" --resource "https://management.core.windows.net/"`).toString();
}


function updateNpmrcWithNewPat() {
    // NPMRC file exists let's update it with a new password.
    const files = readdirSync(`/Users/${userId}/.npmrcs`);

    files.map((file) => {
        // FIXME:temp
        if (file === 'ing-app-atomic') {
            // Determine region
            const region = 'INGCDaaS';
            // Load the npmrc file
            let npmrc = readFileSync(`/Users/${userId}/.npmrcs/${file}`).toString();

            // Check if there is an authorizationID.
            const authIdIsThere = npmrc.includes('#script#');

            if (authIdIsThere) {
                console.log('Yes!');
                // We need to revoke and regenerate
                const authId = npmrc.substring(npmrc.indexOf('#script#') + 8, npmrc.lastIndexOf('#script#'));

                console.log('dd', authId)
                revokePat(region, authId)
                npmrc = npmrc.replace(`#script#${authId}#script#`, '');
            }

            // create new PAT
            const patToken = createPat(region, `${file}_feed`);
            console.log('PAT', patToken)
            const authorizationId = patToken.authorizationId;
            console.log(authorizationId);
            const base64 = new Buffer.from(patToken.token.trim()).toString('base64');
            console.log('ddd', base64)
            const matches = npmrc.matchAll(/:_password=.*/g);
            for (match of matches) {
                npmrc = npmrc.replace(match[0], `:_password=${base64}`)
            }
            // We need to add the authorizationID
            npmrc = npmrc + `#script#${authorizationId}#script#`;

            console.log('dd', npmrc)
            writeFileSync(`/Users/${userId}/.npmrcs/${file}`, npmrc);
        }
    })

}


function start() {

    setup();
    createNpmrcs();
    updateNpmrcWithNewPat();
}

start();